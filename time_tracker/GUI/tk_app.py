#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jul 27, 2022 01:51:13 PM EDT  platform: Windows NT

import sys, traceback
import tkinter as tk
import tkinter.ttk as ttk
import time
import requests as rq
#
def send_data(p_source,p_number,p_name,start,stop):
    package = {}
    package['project_source'] = p_source
    package['project_number'] = p_number
    package['project_name'] = p_name
    package['start_time'] = start
    package['stop_time'] = stop
    url = 'http://time.devinmgardner.com:5000'
    response = rq.post(url,json=package)
    return [response.headers, response.status_code, response.text]
#
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
#
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
#
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    init(root, top)
    root.mainloop()
#
w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        self.running = False
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+660+210")
        top.minsize(120, 1)
        top.maxsize(3604, 1061)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        #
        #
        #
        self.source = tk.Entry(top)
        self.source.place(relx=0.533, rely=0.156, height=20, relwidth=0.373)
        self.source.configure(background="white")
        self.source.configure(disabledforeground="#a3a3a3")
        self.source.configure(font="TkFixedFont")
        self.source.configure(foreground="#000000")
        self.source.configure(insertbackground="black")

        self.name = tk.Entry(top)
        self.name.place(relx=0.533, rely=0.511, height=20, relwidth=0.373)
        self.name.configure(background="white")
        self.name.configure(disabledforeground="#a3a3a3")
        self.name.configure(font="TkFixedFont")
        self.name.configure(foreground="#000000")
        self.name.configure(highlightbackground="#d9d9d9")
        self.name.configure(highlightcolor="black")
        self.name.configure(insertbackground="black")
        self.name.configure(selectbackground="blue")
        self.name.configure(selectforeground="white")

        self.number = tk.Entry(top)
        self.number.place(relx=0.533, rely=0.333, height=20, relwidth=0.373)
        self.number.configure(background="white")
        self.number.configure(disabledforeground="#a3a3a3")
        self.number.configure(font="TkFixedFont")
        self.number.configure(foreground="#000000")
        self.number.configure(highlightbackground="#d9d9d9")
        self.number.configure(highlightcolor="black")
        self.number.configure(insertbackground="black")
        self.number.configure(selectbackground="blue")
        self.number.configure(selectforeground="white")

        self.Start = tk.Button(top)
        self.Start.place(relx=0.05, rely=0.067, height=154, width=187)
        self.Start.configure(activebackground="#ececec")
        self.Start.configure(activeforeground="#000000")
        self.Start.configure(background="#d9d9d9")
        self.Start.configure(disabledforeground="#a3a3a3")
        self.Start.configure(foreground="#000000")
        self.Start.configure(highlightbackground="#d9d9d9")
        self.Start.configure(highlightcolor="black")
        self.Start.configure(pady="0")
        self.Start.configure(text='''START''')
        
        self.Stop = tk.Button(top)
        self.Stop.place(relx=0.05, rely=0.578, height=154, width=187)
        self.Stop.configure(activebackground="#ececec")
        self.Stop.configure(activeforeground="#000000")
        self.Stop.configure(background="#d9d9d9")
        self.Stop.configure(cursor="fleur")
        self.Stop.configure(disabledforeground="#a3a3a3")
        self.Stop.configure(foreground="#000000")
        self.Stop.configure(highlightbackground="#d9d9d9")
        self.Stop.configure(highlightcolor="black")
        self.Stop.configure(pady="0")
        self.Stop.configure(text='''STOP''')
        self.Stop.configure(state='disabled')
        #
        #
        #
        self.source_label = tk.Label(top)
        self.source_label.place(relx=0.533, rely=0.089, height=21, width=94)
        self.source_label.configure(background="#d9d9d9")
        self.source_label.configure(disabledforeground="#a3a3a3")
        self.source_label.configure(foreground="#000000")
        self.source_label.configure(text='''Project Source''')

        self.number_label = tk.Label(top)
        self.number_label.place(relx=0.533, rely=0.267, height=21, width=94)
        self.number_label.configure(activebackground="#f9f9f9")
        self.number_label.configure(activeforeground="black")
        self.number_label.configure(background="#d9d9d9")
        self.number_label.configure(disabledforeground="#a3a3a3")
        self.number_label.configure(foreground="#000000")
        self.number_label.configure(highlightbackground="#d9d9d9")
        self.number_label.configure(highlightcolor="black")
        self.number_label.configure(text='''Project Number''')

        self.name_label = tk.Label(top)
        self.name_label.place(relx=0.533, rely=0.444, height=21, width=84)
        self.name_label.configure(activebackground="#f9f9f9")
        self.name_label.configure(activeforeground="black")
        self.name_label.configure(background="#d9d9d9")
        self.name_label.configure(disabledforeground="#a3a3a3")
        self.name_label.configure(foreground="#000000")
        self.name_label.configure(highlightbackground="#d9d9d9")
        self.name_label.configure(highlightcolor="black")
        self.name_label.configure(text='''Project Name''')
        #
        self.outputFrame = tk.LabelFrame(top)
        self.outputFrame.place(relx=0.533, rely=0.578, relheight=0.342
                , relwidth=0.373)
        
        self.scrollbar = tk.Scrollbar(self.outputFrame)
        self.scrollbar.pack(side = 'right',fill='y')
        self.outputwindow = tk.Text(self.outputFrame, yscrollcommand = self.scrollbar.set,wrap = "word",width = 200,font = "{Arial} 9")
        self.outputwindow.pack(side = 'left',fill='y')
        self.scrollbar.config(command = self.outputwindow.yview)
        self.outputwindow.yview('end')
        self.outputwindow.config(yscrollcommand=self.scrollbar.set)
        self.outputwindow.insert('end','Messages will appear here.\n')
        self.outputwindow.config(state='disabled')
        self.outputwindow.see('end')
        #
        #
        def start_time():
            self.start_time = time.time()
            now = time.localtime()
            self.running = True
            self.Start.configure(state='disabled')
            self.Stop.configure(state='normal')
            self.outputwindow.config(state='normal')
            self.outputwindow.insert('end',f'Started timer running at {now.tm_mon}-{now.tm_mday}-{now.tm_year} {now.tm_hour}:{now.tm_min}:{now.tm_sec}')
            self.outputwindow.config(state='disabled')
            self.outputwindow.see('end')
        def stop_time():
            self.stop_time = time.time()
            now = time.localtime()
            self.running = False
            source = self.source.get()
            name = self.name.get()
            number = self.number.get()
            self.Stop.configure(state='disabled')
            self.Start.configure(state='normal')
            self.outputwindow.config(state='normal')
            self.outputwindow.insert('end',f'Stopped timer running at {now.tm_mon}-{now.tm_mday}-{now.tm_year} {now.tm_hour}:{now.tm_min}:{now.tm_sec}')
            self.outputwindow.insert('end',f'Attempting to send data to API now.')
            self.outputwindow.config(state='disabled')
            self.outputwindow.see('end')
            try:
                response = send_data(source,number,name,self.start_time,self.stop_time)
                self.outputwindow.config(state='normal')
                self.outputwindow.insert('end',response[0])
                self.outputwindow.insert('end',response[1])
                self.outputwindow.insert('end',response[2])
                self.outputwindow.config(state='disabled')
                self.outputwindow.see('end')
            except Exception as e:
                self.outputwindow.config(state='normal')
                self.outputwindow.insert('end',str(e))
                self.outputwindow.insert('end',traceback.format_exc())
                self.outputwindow.config(state='disabled')
                self.outputwindow.see('end')
        self.Start.configure(command=lambda: start_time())
        self.Stop.configure(command=lambda: stop_time())
        #
        #
        #

if __name__ == '__main__':
    vp_start_gui()

